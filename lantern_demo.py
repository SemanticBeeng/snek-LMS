torch.set_printoptions(precision=10)

inp = torch.DoubleTensor([[[
  [-0.1432937727,0.0507705638,0.1211425707,-0.4193351725,-0.0008559877,0.2926743207,0.4880735557,0.4890885889,-0.0418422537,0.1351665853],
  [0.4275382100,-0.1371300503,0.2701371772,0.2314612846,-0.4311489830,-0.4051403473,0.0683373737,0.2286013573,0.2165231238,0.3113607545],
  [0.3178894584,0.2612269920,0.2973071988,0.0695528102,0.1544807538,-0.1998665303,0.2037338092,-0.4228167161,0.0278795280,-0.2395044955],
  [0.1064549352,0.3845857554,0.3112660687,-0.2724024946,0.4652505829,-0.1895899194,-0.4797281744,0.4533241382,-0.2005013310,-0.0215704281],
  [0.0884907230,-0.2729631210,0.3412995221,-0.1413721003,0.4584981636,0.4101505391,-0.0465124471,0.0268355368,0.1387518964,-0.3299893238],
  [-0.1618037092,-0.0433586457,0.4312376687,-0.3644965109,-0.4738058355,0.0857184220,-0.0643630412,0.2299279737,0.1629017059,0.4635164868],
  [0.4904234782,-0.2306433589,0.3481022417,0.3016895465,-0.0030458535,0.3133528241,-0.3879003729,0.0172259726,0.2666769618,-0.0884017039],
  [0.4956555446,-0.1448323157,0.1386351751,0.3369550662,0.2137955840,0.0971333383,0.2471056053,-0.3327168635,-0.3760311254,-0.1141424988],
  [-0.1627061868,-0.0378348346,0.3424988556,-0.2314685186,0.0976686546,0.3686930201,0.3542499034,-0.4666943871,0.0986209934,0.0171516088],
  [0.4968220997,0.0890444715,0.2865082500,0.3449243409,-0.1092659825,-0.2165376035,0.1582771645,0.0028336446,0.3006883691,-0.0750458741]],
  [[0.4144319412,0.2963439132,0.2801218102,0.0530671159,0.1332989794,-0.0060826058,-0.3497995459,-0.1195954157,0.1612005307,-0.2258306712],
  [0.2662620855,0.4984943438,0.2363344947,0.1087609407,-0.2329741752,-0.1659968512,-0.0225460392,-0.3787242723,-0.1326912379,-0.4239250463],
  [0.1384273370,-0.1358691387,0.1651194252,-0.0750644135,-0.2909447978,-0.4441465572,0.2083979830,0.3673323667,0.0586870874,0.0090863516],
  [-0.2077135074,-0.0268809719,-0.1945697352,-0.4275916977,-0.4738138560,0.4387292443,0.0663256964,-0.3236134019,-0.1808661719,-0.2724737729],
  [-0.0494440731,-0.4146040869,-0.2739794295,-0.3131095789,0.1941568538,-0.0069536043,0.0208935703,-0.3283891859,0.1143221234,0.3882023324],
  [-0.2523142317,-0.2472505401,-0.2476668068,0.4128051935,0.1776850469,-0.0386116046,0.4686586363,-0.1139169706,-0.1712792379,0.0273457237],
  [0.3951693815,0.1210072546,-0.4995352486,-0.2994003542,0.1934155569,-0.4733491046,-0.3606711104,-0.2402587467,-0.2969625065,-0.0415372823],
  [-0.0127325195,0.1535934208,0.0438586308,0.2132880509,0.3404838419,-0.2619845158,-0.2936655538,-0.1386225883,-0.0903737012,0.3206565701],
  [-0.2504202564,0.1573120671,-0.4265939705,0.0019129373,0.0701172601,0.2510910764,0.4633013327,0.0387758964,-0.3628258942,-0.2079779057],
  [-0.4338783803,-0.4676565132,0.4130293489,-0.4334136289,-0.2670568674,0.1064449058,-0.4067627331,-0.1277279778,0.3661861591,-0.2037252396]
  ]]])

kernel1 = torch.DoubleTensor([
  [[[0.3307347399,-0.1465463609,0.4498681812],
  [-0.1254066297,-0.4332583104,0.2903520231],
  [0.1126088545,-0.2269238637,-0.3482705657]],
  [[-0.4777648472,-0.4062672942,-0.0986908216],
  [0.1795472199,-0.3328612646,0.4032221157],
  [-0.2503355200,0.4182298123,0.3665234479]]],
  [[[0.2884403764,-0.4445960824,-0.3414544579],
  [0.3545619961,-0.4122525956,-0.4284251094],
  [0.4211483672,-0.1793094630,0.1780197963]],
  [[-0.4856143664,0.1929625593,0.0442059550],
  [-0.1893396055,0.0236972987,0.3976595941],
  [-0.2394714247,0.3982906690,0.4644012842]]]])


kernel2 = torch.DoubleTensor([
  [[[-0.4491194021,0.0108995230,-0.2625225800],
  [-0.2973899673,0.0331346763,-0.1687898741],
  [0.1039192111,-0.2873181043,-0.0016511388]],
  [[0.0071413263,-0.0376536243,-0.0834213270],
  [-0.1263352263,-0.2492132484,-0.0280174094],
  [0.0322103158,-0.3946512527,0.0597299950]]],
  [[[0.1037852068,-0.4735028855,0.3804205320],
  [-0.2181949973,-0.4591172519,0.0733830908],
  [0.3260109582,-0.1484568574,-0.4029196109]],
  [[0.2236705519,0.1120717184,0.4953710581],
  [0.1880718356,0.1629523163,0.0062705812],
  [0.4255492556,0.3655623490,-0.4605947430]]],
  [[[-0.2432406190,-0.0305184403,-0.2479128473],
  [0.2551082427,0.4766228860,0.2144335288],
  [-0.3283130847,-0.1497123403,0.4652202804]],
  [[0.1436695064,0.3824979755,-0.4294309723],
  [-0.2966004991,-0.0137168181,-0.4029338578],
  [-0.4161799671,0.2680881851,-0.3620511097]]]
  ])



matrix = torch.DoubleTensor([
  [0.1572031237,0.0940991429,-0.0105079666,0.2542835133,-0.1822303057,-0.3984362487,0.2496545709,-0.4941584701,0.2645160676,-0.2440748484,0.4313907856,0.1300784166],
  [-0.2046695914,-0.3118498334,-0.4004400242,0.0474175618,0.4432584094,-0.4238171382,-0.2381489099,-0.3850546758,-0.0735294784,-0.2729286299,0.2586148306,-0.1910315033],
  [-0.2023596022,0.4620143319,0.2952516790,-0.1052934600,-0.4541656356,0.0633398637,0.0326554307,0.2030374881,-0.3425609939,-0.4778525364,-0.0426789990,-0.0247912996],
  [-0.3762887851,-0.2930244281,-0.0189497697,0.3882272825,-0.0370992765,-0.0875589841,0.0183056987,0.2582311326,0.1005911825,0.1178656750,-0.1943513060,0.0438495914],
  [0.1940485368,0.0674997841,0.1587949156,-0.3794809421,0.2945711542,-0.0825902538,-0.0705124454,-0.4077884480,-0.1205759224,-0.2752607669,-0.0130819080,-0.0747415580]
  ])

bias = torch.DoubleTensor([0.2880790968,-0.4804264777,-0.3717040703,0.4455181029,-0.4582790141])

vinput = Variable(inp, requires_grad=True)

vMat = Parameter(matrix, requires_grad=True)
# vMat.register_hook(print)
vVec = Parameter(bias, requires_grad=True)
# vVec.register_hook(print)

@lms
def f(x):
  fc1 = nn.Linear(320, 50)
  return fc1(x)

print(f.src)
print(reify(lambda: f(Rep("in"))))
# class Net(nn.Module):
#   def __init__(self):
#     super(Net, self).__init__()
#     self.vker1 = Parameter(kernel1, requires_grad=True)
#     self.vker1.register_hook(print)
#     self.vker2 = Parameter(kernel2, requires_grad=True)
#     self.vker2.register_hook(print)
#     self.vMat = Parameter(matrix, requires_grad=True)
#     self.vMat.register_hook(print)
#     self.vVec = Parameter(bias, requires_grad=True)
#     self.vVec.register_hook(print)

#     @lms
#   def forward(self, x):
#       print(x)
#       resConv = F.conv2d(x, self.vker1)
#       resConv.register_hook(print)
#       print(resConv)
#       resMax = F.max_pool2d(resConv, 2)
#       resMax.register_hook(print)
#       print(resMax)
#       resRelu = F.relu(resMax)
#       resRelu.register_hook(print)
#       print(resRelu)
#       resConv2 = F.conv2d(resRelu, self.vker2)
#       resConv2.register_hook(print)
#       print(resConv2)
#       resRelu1 = F.relu(resConv2)
#       resRelu1.register_hook(print)
#       print(resRelu1)
#       resMMat = F.linear(resRelu1.view(1, 12), self.vMat, self.vVec)
#       resMMat.register_hook(print)
#       print(resMMat)
#       resLSM = F.log_softmax(resMMat, dim = 1)
#       resLSM.register_hook(print)
#       print(resLSM)
#       return resLSM

#       def print(self):
#        print("==========================================")
#        print("model param:")
#        print(self.vker1)
#        print(self.vker2)
#        print(self.vMat)
#        print(self.vVec)

#        model = Net()
#        optimizer = optim.SGD(model.parameters(), lr=0.5, momentum=0.0)

#        for i in range(1000):
#         optimizer.zero_grad()
#         output = model(vinput)
#         loss = F.nll_loss(output, Variable(torch.LongTensor([2])))
#         loss.register_hook(print)

#         print(loss.data[0])
#         loss.backward()

#         optimizer.step()
#         model.print()